" Plugins

" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('~/.vim/plugged')

Plug 'junegunn/vim-plug'

" Editing
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'editorconfig/editorconfig-vim'
Plug 't9md/vim-smalls'
Plug 'jiangmiao/auto-pairs'
Plug 'machakann/vim-highlightedyank'

" Editor visuals
Plug 'gorodinskiy/vim-coloresque'
Plug 'luochen1990/rainbow'
Plug 'vim-scripts/Smooth-Scroll'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" UI
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'itchyny/lightline.vim'
Plug 'liuchengxu/vim-which-key'
Plug 'mhinz/vim-startify'
Plug 'ryanoasis/vim-devicons'

call plug#end()

colorscheme catppuccin_mocha

" auto re-source .vimrc on change
augroup reloadvimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC
        \ source $MYVIMRC
        \ | echom "Reloaded $MYVIMRC"
augroup END

" auto resize windows when terminal is resized
augroup resizewindows
    autocmd!
    autocmd VimResized * tabdo wincmd =
augroup END

" auto toggle between absolute and relative line numbers:
set number
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
    autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup END

augroup incsearch-highlight
    autocmd!
    autocmd CmdlineEnter /,\? :set hlsearch
    autocmd CmdlineLeave /,\? :set nohlsearch
augroup END

set encoding=UTF-8
set nomodeline
" enable mouse support
set mouse=a
" use 24-bit color
set termguicolors
" disable the --MODE-- message in lastline
set noshowmode
" show partial command in lastline
set showcmd showcmdloc=last
" make whitespace visible
set list
set listchars=trail:◦,multispace:◦,leadmultispace:\ ,nbsp:⍽,tab:-->,precedes:«,extends:»
" disable line wrapping, turn on graduated scrolling
set nowrap sidescroll=5
" wrap at word boundaries
set linebreak
" indicate word wraps in the gutter
set showbreak=\ ++\ … cpoptions+=n
" yank to middle mouse click buffer
set clipboard=unnamed
" case-insensitive searching except when uppercase characters present
set ignorecase smartcase
" new splits are created at right and bottom, instead of left and top
set splitbelow splitright

function! s:formatVersion(version)
    let l:verstr = string(a:version)
    let l:vercomponents = ( strlen(l:verstr) >= 7 )
        \ ? [l:verstr[:-7],l:verstr[-6:-5],l:verstr[-4:]]
        \ : [l:verstr[:-3],l:verstr[-2:]]
    return l:vercomponents
        \ ->map({idx, val -> trim(val[:-2], '0', 1) . val[-1:]})
        \ ->join('.')
endfunction

let g:startify_custom_header = startify#center([
    \ "           d8,              ",
    \ "          `8P               ",
    \ "                            ",
    \ "?88   d8P  88b  88bd8b,d88b ",
    \ "d88  d8P'  88P  88P'`?8P'?8b",
    \ "?8b ,88'  d88  d88  d88  88P",
    \ "`?888P'  d88' d88' d88'  88b",
    \ ])
    \ + ['']
    \ + startify#center(['version ' . s:formatVersion(v:version)])
let g:startify_custom_footer = startify#center(startify#fortune#cowsay())
let g:startify_change_to_dir = 1
let g:startify_change_to_vcs_root = 1
let g:startify_use_env = 1
let g:startify_lists = [
    \ { 'type': 'dir',       'header': ['   MRU ' . getcwd() . ' ' . system('git log -1 --format="(%h %s)" -z 2> /dev/null')->trim()] },
    \ { 'type': 'sessions',  'header': ['   Sessions']       },
    \ { 'type': 'bookmarks', 'header': ['   Bookmarks']      },
    \ { 'type': 'commands',  'header': ['   Commands']       },
    \ ]

let g:lightline = { 'colorscheme': 'catppuccin_mocha' }
let g:lightline.active = {
    \ 'left': [
        \ [ 'mode', 'paste', 'cmd' ],
        \ [ 'fugitive' ],
        \ [ 'filename', 'filestatus', 'filetype' ]
        \ ],
    \ 'right': [
        \ [ 'lineinfo' ],
        \ [ 'percent' ],
        \ [ 'fileformat', 'encoding?' ]
        \ ]
    \ }
let g:lightline.inactive = {
    \ 'left': [
        \ [ 'fugitive' ],
        \ [ 'filename' , 'filestatus' ]
        \ ],
    \ 'right': [
        \ [ 'lineinfo' ],
        \ [ 'percent' ],
        \ [ 'fileformat', 'encoding?' ]
        \ ] }
let g:lightline.subseparator = {
    \ 'left': ''
    \ }
let g:lightline.tabline = {
    \ 'left': [ [ 'tabs' ] ],
    \ 'right': [ [ 'close' ] ] }
let g:lightline.mode_map = {
    \ 'n': '',
    \ 'i': '󰙏',
    \ 'c': '',
    \ 'R': '󰯍',
    \ 'v': '󰈈',
    \ 'V': '󱀦',
    \ "\<C-v>": '󰡫',
    \ 's': '󰒉',
    \ 'S': '',
    \ "\<C-s>": '󰩭',
    \ 't': '',
    \ }
let g:lightline.component = {
    \ 'cmd': '%S',
    \ }
let g:lightline.component_function = {
    \ 'filetype': 'IconFiletype',
    \ 'fileformat': 'IconFileformat',
    \ 'fugitive': 'LightlineFugitive',
    \ 'filestatus': 'LightlineFileStatus',
    \ 'encoding?': 'LightlineNondefaultEncoding',
    \ }

let g:highlightedyank_highlight_duration = 200
let g:highlightedyank_highlight_in_visual = 0

function! IconFiletype()
    return WebDevIconsGetFileTypeSymbol() . ( winwidth(0) > 70 ? ' ' . ( strlen(&filetype) ? &filetype : 'unknown' ) : '' )
endfunction

function! IconFileformat()
    return winwidth(0) > 70 ? WebDevIconsGetFileFormatSymbol() : ''
endfunction

function! LightlineNondefaultEncoding()
    let l:encoding = &fenc !=# '' ? &fenc : &enc
    return l:encoding ==# 'utf-8' ? '' : l:encoding
endfunction

function! LightlineFileStatus()
    return (
        \ &ft ==# 'help' ? '󰣯'
        \ : &modified ? '󰏫'
        \ : &readonly ? '󰏯'
        \ : !&modifiable ? '󰌾'
        \ : '' )
endfunction

function! LightlineFugitive()
    try
        if expand('%t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*FugitiveHead')
            let branch = FugitiveHead()
            return branch !=# '' ? ' ' . branch : ''
        endif
    catch
    endtry
    return ''
endfunction

let g:scroll_factor = 1

let g:smalls_jump_trigger = '<CR>'
let g:smalls_auto_jump = 1
let g:smalls_auto_jump_min_input_length = 2
let g:smalls_auto_set_min_input_length = 2

" Leader mappings

let g:mapleader = " "

let g:nleadermap = {
    \ 'e': [':NERDTreeFocus', 'focus-nerdtree'],
    \ }

let g:nleadermap.g = {
    \ 'name': '+git',
    \ '<CR>': '<enter raw command>',
    \ 'c': [':Git commit', 'commit'],
    \ }
nnoremap <leader>g<CR> :Git

let g:nleadermap.s = {
    \ 'name': '+set',
    \ 'w': [':set wrap! wrap?', 'wrap'],
    \ }

let g:nleadermap.t = {
    \ 'name': '+term',
    \ 'h': [':terminal', 'h-term'],
    \ 'v': [':vertical terminal', 'v-term'],
    \ }

let g:nleadermap.w = {
    \ 'name': '+win',
    \ 'h': [':split', 'h-split'],
    \ 'H': [':new', 'h-split-new'],
    \ 'v': [':vsplit', 'v-split'],
    \ 'V': [':vnew', 'v-split-new'],
    \ 'q': [':quit', 'quit-window'],
    \ }

call which_key#register('<Space>', "g:nleadermap", 'n')

" Mappings
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap s <Plug>(smalls)

" Remappings
imap jj <Esc>
tmap jj <C-W>N
nmap j gj
nmap k gk
nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-L> <C-W>l
vmap j gj
vmap k gk
vmap < <gv
vmap > >gv

" Highlight groups
hi link SpecialKey NonText
hi HighlightedyankRegion cterm=reverse gui=reverse
