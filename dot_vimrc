" Plugins
call plug#begin('~/.vim/plugged')

" Editing
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'markonm/traces.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 't9md/vim-smalls'

" Editor visuals
Plug 'gorodinskiy/vim-coloresque'
Plug 'luochen1990/rainbow'
Plug 'vim-scripts/Smooth-Scroll'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" UI
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'itchyny/lightline.vim'
Plug 'liuchengxu/vim-which-key'
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'mhinz/vim-startify'
Plug 'ryanoasis/vim-devicons'

call plug#end()

colorscheme catppuccin_mocha

" auto re-source .vimrc on change
autocmd! BufWritePost $MYVIMRC source $MYVIMRC | echom "Reloaded $MYVIMRC"

" auto resize windows when terminal is resized
autocmd! VimResized * tabdo wincmd =

" auto toggle between absolute and relative line numbers:
set number
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu && mode() != "i" | set rnu   | endif
  autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu                  | set nornu | endif
augroup END

augroup vimrc-incsearch-highlight
  autocmd!
  autocmd CmdlineEnter /,\? :set hlsearch
  autocmd CmdlineLeave /,\? :set nohlsearch
augroup END

set encoding=UTF-8
" enable mouse support
set mouse=a
" disable the --MODE-- message below statusline
set noshowmode
" use 24-bit color
set termguicolors
" make whitespace visible
set list
set listchars=trail:◦,multispace:◦,nbsp:⍽,tab:-->,precedes:«,extends:»
" yank to middle mouse click buffer
set clipboard=unnamed
" show partial command
set showcmd
" case-insensitive searching except when uppercase characters present
set ignorecase
set smartcase
" disable line wrapping, turn on graduated scrolling
set nowrap
set sidescroll=5
" wrap at word boundaries
set linebreak
" indicate word wraps in the gutter
set showbreak=\ ++\ …
set cpoptions+=n

let g:startify_custom_header = startify#center([
	\ "           d8,              ",
	\ "          `8P               ",
	\ "                            ",
	\ "?88   d8P  88b  88bd8b,d88b ",
	\ "d88  d8P'  88P  88P'`?8P'?8b",
	\ "?8b ,88'  d88  d88  d88  88P",
	\ "`?888P'  d88' d88' d88'  88b",
	\ ])
let g:startify_custom_footer = startify#center(startify#fortune#cowsay())
let g:startify_change_to_dir = 1
let g:startify_change_to_vcs_root = 1
let g:startify_use_env = 1

let g:mapleader = " "

let g:lightline = {
	\ 'mode_map': {
		\ 'n': 'NML',
		\ 'i': 'INS',
		\ 'c': 'CMD',
		\ 'r': 'REP',
		\ 'v': 'VIS',
		\ 'V': 'V-L',
		\ "\<C-v>": 'V-B',
		\ 's': 'SEL',
		\ 'S': 'S-L',
		\ "\<C-s>": 'S-B',
		\ 't': 'TTY',
		\ },
	\ 'component_function': {
		\ 'filetype': 'IconFiletype',
		\ 'fileformat': 'IconFileformat',
		\ }
	\ }
  function! IconFiletype()
    return WebDevIconsGetFileTypeSymbol() . ( winwidth(0) > 70 ? ' ' . ( strlen(&filetype) ? &filetype : 'unknown' ) : '' )
  endfunction
  
  function! IconFileformat()
    return winwidth(0) > 70 ? WebDevIconsGetFileFormatSymbol() : ''
  endfunction

let g:scroll_factor = 1

let g:smalls_jump_trigger = '<CR>'
let g:smalls_auto_jump = 1
let g:smalls_auto_jump_min_input_length = 2
let g:smalls_auto_set_min_input_length = 2

" Mappings
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap <leader>e :NERDTreeFocus<CR>
nnoremap <C-W>t :terminal<CR>
nnoremap <C-W>T :vertical terminal<CR>
nnoremap s <Plug>(smalls)

" Remappings
imap jj <Esc>
nmap j gj
nmap k gk
tmap <C-W><C-W> <C-W>N

" Highlight groups
hi link SpecialKey NonText
